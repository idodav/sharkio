name: staging-cicd

on:
  push:
    branches:
      - staging-cicd

env:
  region: eu-central-1
  cache_path: /tmp/sharkio-staging-cache
  environment: staging

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
      pull-requests: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 4
          ref: staging-cicd

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ env.cache_path }}
          key: ${{ runner.os }}-buildx-${{ hashFiles('client/Dockerfile', 'client/package-lock.json', 'server/Dockerfile.backend', 'server/Dockerfile.migrations', 'server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('client/Dockerfile', 'client/package-lock.json') }}-
            ${{ runner.os }}-buildx-${{ hashFiles('server/Dockerfile', 'server/package-lock.json') }}-
            ${{ runner.os }}-buildx-

      - name: Set short git commit SHA
        run: |
          short_sha=$(git rev-parse --short ${{ github.sha }})
          echo "short_sha=$short_sha" >> $GITHUB_ENV

      - name: Build and Push Docker Images Based on Changes
        id: image_builder
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | uniq)
          echo $changed_files
          echo "Changed directories: $changed_files"
      
          build_and_push() {
            local registry=${{ steps.login-ecr.outputs.registry }}
            local repository=$1
            local dockerfile=$2

            echo "Building Docker image for $repository"
            docker buildx build \
            -t $registry/$repository:${{ env.environment }}-${{ github.sha}} \
            -t $registry/$repository:${{ env.environment }}-${{ env.short_sha }} \
            --cache-to type=local,dest=${{ env.cache_path }} \
            --push \
            -f $dockerfile . 
          }

          if echo "$changed_files" | grep "^client/"; then
            pushd client/
            build_and_push "frontend" "Dockerfile" 
            popd
            images1="\"frontend\","
          fi

          if echo "$changed_files" | grep "^server/"; then
            pushd server/
            build_and_push "backend" "Dockerfile.backend"
            popd
            images2="\"backend\","
          fi

          if echo "$changed_files" | grep "^server/model/"; then
            pushd server/
            build_and_push "migrations" "Dockerfile.migrations"
            popd
            images3="\"migrations\","
          fi

          echo "images:" $images
          echo "'{\"images\":[$images1 $images2 $images3]}'" > images.txt
          echo "images.txt contains: $(cat images.txt)"
          echo "images_json=$(cat images.txt)" >> $GITHUB_OUTPUT

      - name: github_env/output test
        run: |
          echo "Received images_json(output): ${{ steps.image_builder.outputs.images_json }}"
         

  deploy:
    needs: build
    strategy:
      matrix: ${{ fromJson(needs.build.output.image_builder)  }}
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
      pull-requests: "write"
    steps:
      - name: Debug Received JSON
        run: |
          echo "Received images_json(output): ${{ needs.build.outputs.images_json }}"
          echo "Recevied images_json2(env)": ${{ needs.github.images_json2 }}
      - name: Workflow Dispatch
        uses: benc-uk/workflow-dispatch@v1.2.2
        with:
          workflow: sharkio-devops-cicd
          repo: "sharkio-dev/DevOps"
          token: ${{ secrets.DEPLOY_KEY }}
          ref: "staging"
          inputs: '{"image": "${{ matrix.images }}", "image_tag": "${{ github.sha }}" ,"env": "${{ github.event.inputs.env }}"}'
